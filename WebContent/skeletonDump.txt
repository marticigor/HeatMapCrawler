		    for (int [] elem : strElems){
                for (int absX = widthFrom; absX < widthTo; absX++) {
                    for (int absY = heightFrom; absY < heightTo; absY++) {
                    
                	    p = in.getPixel(absX, absY);

            		    riop.setPixelToCheckAround(p);
            		    riop.resetCount();
            		    indexRoundIter = 0;
		    
            		    passed = true;
            		    for(Pixel pi : riop){
                         
            		    	compareFromPi = (pi.getRed() == redScheme[0] ? 1 : 0 );
            		    	compareFromElem = elem[indexRoundIter];
            		    	
            		    	if(compareFromElem != -1 && compareFromPi != compareFromElem) passed = false;
            		        indexRoundIter ++;
            		        
            		    }
            		    
            		    if(passed) p.setRed(redScheme[0]);else p.setRed(0);
            		    
            	    }
                }
            }
            	
	private static class StructElements{
		
		static final int [] l1 = new int []{0,0,0,-1,1,1,1,-1};
		static final int [] r1 = new int []{-1,0,0,0,-1,1,-1,1};
		static final int [] l2 = new int []{1,-1,0,0,0,-1,1,1};
		static final int [] r2 = new int []{-1,1,-1,0,0,0,-1,1};
		static final int [] l3 = new int []{1,1,1,-1,0,0,0,-1};
		static final int [] r3 = new int []{-1,1,-1,1,-1,0,0,0};
		static final int [] l4 = new int []{0,-1,1,1,1,-1,0,0};
		static final int [] r4 = new int []{0,0,-1,1,-1,1,-1,0};

	}
		List<int[]> strElems = new ArrayList<int[]>();
		
		strElems.add(StructElements.l1);
		strElems.add(StructElements.r1);
		strElems.add(StructElements.l2);
		strElems.add(StructElements.r2);
		strElems.add(StructElements.l3);
		strElems.add(StructElements.r3);
		strElems.add(StructElements.l4);
		strElems.add(StructElements.r4);
		
		Pixel p;
		RoundIteratorOfPixels riop = new RoundIteratorOfPixels(in);
		int indexRoundIter = 0;
		int compareFromPi = -1;
		int compareFromElem = -1;
		boolean passed = true;
